#!/bin/zsh

# ZSH only and most performant way to check existence of an executable
# https://www.topbug.net/blog/2016/10/11/speed-test-check-the-existence-of-a-command-in-bash-and-zsh/
exists() { (( $+commands[$1] )); }

# Default to using `bat` https://github.com/sharkdp/bat#installation if it has been installed
cat() {
  if hash bat 2>/dev/null; then
    bat "$@"
  else
    cat "$@"
  fi
}

# chmod a directory
ch() {
  sudo chmod -R 777 "$@"
}

# fix permissions
chf() {
  sudo compaudit | xargs chmod g-w,o-w "$@"
}

neob() {
  if [ -e ~/.local/bin/nvim ]; then
    mv ~/.local/bin/nvim ~/.local/bin/nvim-old
  fi

  cp --force ~/.dots/neovim/build/bin/nvim  ~/.local/bin
}

# chown a directory
cho() {
  sudo chown -R www:www "$@"
}

# chmod executable
cx() {
  sudo chmod +x "$@"
}

zshcomp() {
  for command completion in ${(kv)_comps:#-*(-|-,*)}
  do
    printf "%-32s %s\n" $command $completion
  done | sort
}

# copy the active line from the command line buffer
# onto the system clipboard
copybuffer() {
  printf "%s" "$BUFFER" | clipcopy
}
zle -N copybuffer
bindkey "^o" copybuffer

# Copies the pathname of the current directory to the system or X Windows clipboard
copydir() {
  emulate -L zsh
  print -n $PWD | clipcopy
}
zle -N copydir
bindkey "^w" copydir

# ftmux - propose running tmux session
# https://github.com/Phantas0s/.dotfiles/blob/master/zsh/scripts_fzf.zsh
axd() {
  if [[ ! -n $TMUX ]]; then
    # get the IDs
    ID="`tmux -L "$@" list-sessions`"
    ID="`echo $ID | fzf | cut -d: -f1`"
    if [[ -n "$ID" ]]; then
      printf '\033]777;tabbedx;set_tab_name;%s\007' "$ID"
      # tmux -L "$@" attach-session -t "$ID"
    else
      :  # Start terminal normally
    fi
  fi
}

ires() {
  xdpyinfo | awk '/dimnsions/{print $2}'
}

irecentNote() {
  ls -r ~/notes/src/* | head -n1 | xargs nvim -u ~/docs/raw.lua
}

ivpn() {
  server="$@"
  sudo openvpn --config $server --auth-user-pass ~/docs/vpnbook
}

mc() {
  mkdir "$@" && cd "$@"
}

#look up synonym - (word)
# slow and buggy
syn() {
  curl -s "https://api.dictionaryapi.dev/api/v2/entries/en/$1" | jq '.[].meanings[].definitions[].synonyms[]'
}

# take, npm init and git init and ignore node_modules
tng() {
  take $1 && npm init -y && git init && echo "node_modules" >> .gitignore
}

# see environment variables
envs() {
 # ps eww -o command | tr ' ' '\n'
 printenv | fzf
}


# get 12 newest or hottest posts from @subreddit & open selection in browser
# ex: > reddit neovim new
# @subreddit - Required (should default to `neovim` )
# @filter - new(default) | hot | or any listing filter: https://www.reddit.com/dev/api/#GET_hot - Optional
reddit() {
  local filter=${2:-new}
  local json
  local url
  # TODO: get a preview with `selftext`-->`\t\(.data.selftext[:30])`
  # TODO: make `limit` a variable
  # Note: Using SauceCodePro reddit icon in list items. Remove or replace as needed.
  json=$(curl -s -A 'Reddit Post Picker' "https://www.reddit.com/r/$1/$filter.json?limit=12" | jq -r '.data.children| .[] | " \(.data.title)\t\(.data.permalink)"')
  url=$(echo "$json" | fzf --delimiter='\t' --with-nth=1 | cut -f2)
  if [[ -n $url ]]; then
    open "https://www.reddit.com$url"
  fi
}

# search notes and open it in nvim
vn() {
  local note
  note=$(fd . '/home/razak/notes/src' | fzf)
  if [[ -n $note ]]
  then
    rvim $note
  fi
}

# find files
ff() {
  local file
  file=$(fd . | fzf)
  if [[ -n $file ]]
  then
    rvim $file
  fi
}

# zd - use zoxide & FZF to find and go to directory
# Not sure why zoxide query -i with FZF doesn't CD
zd() {
  local dir
  dir=$(zoxide query -l | fzf )

  if [[ -n $dir ]]
  then
    cde $dir || exit
  fi
}
