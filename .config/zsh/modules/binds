#!/bin/zsh

export KEYTIMEOUT=1

# Ref: from oh-my-zsh (tools/key-bindings)
# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

# [Shift-Tab] - move through the completion menu backwards
if [[ -n "${terminfo[kcbt]}" ]]; then
  bindkey -M viins "${terminfo[kcbt]}" reverse-menu-complete
  bindkey -M vicmd "${terminfo[kcbt]}" reverse-menu-complete
fi

# [Backspace] - delete backward
bindkey -M viins '^?' backward-delete-char
bindkey -M vicmd '^?' backward-delete-char

# [Delete] - delete forward
if [[ -n "${terminfo[kdch1]}" ]]; then
  bindkey -M viins "${terminfo[kdch1]}" delete-char
  bindkey -M vicmd "${terminfo[kdch1]}" delete-char
else
  bindkey -M viins "^[[3~" delete-char
  bindkey -M vicmd "^[[3~" delete-char

  bindkey -M viins "^[3;5~" delete-char
  bindkey -M vicmd "^[3;5~" delete-char
fi

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# use the vi navigation keys in menu completion
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

bindkey '^r' history-incremental-search-backward # [Ctrl-r] - Search backward incrementally for a specified string. The string may begin with ^ to anchor the search to the beginning of the line.
bindkey -s '^z' 'zi^M'
bindkey "^j" down-line-or-beginning-search # Down
bindkey "^k" up-line-or-beginning-search # Up
# bindkey ' ' magic-space  # [Space] - don't do history expansion
bindkey '^U' autosuggest-execute
bindkey '^H' autosuggest-accept
# bindkey '^j' autosuggest-clear
bindkey '^]' clear-screen

# Edit line in vim with v whilst in normal mod in vi mode
autoload -Uz edit-command-line;
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

# Edit the current command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-e' edit-command-line

bindkey -M menuselect '^x' clear-screen

# copy the active line from the command line buffer
# onto the system clipboard
copybuffer() {
  printf "%s" "$BUFFER" | clipcopy
}
zle -N copybuffer
bindkey "^o" copybuffer

# Copies the pathname of the current directory to the system or X Windows clipboard
copydir() {
  emulate -L zsh
  print -n $PWD | clipcopy
}
zle -N copydir
bindkey "^w" copydir

expand-or-complete-with-dots() {
  print -Pn "%F{red}â€¦%f"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
# Set the function as the default tab completion widget
bindkey -M viins "^I" expand-or-complete-with-dots
bindkey -M vicmd "^I" expand-or-complete-with-dots

# autocorrect () {
#   zle .spell-word
#   zle .$WIDGET
# }
# zle -N accept-line autocorrect
# zle -N magic-space autocorrect
# bindkey ' ' magic-space

zmodload zsh/complist
