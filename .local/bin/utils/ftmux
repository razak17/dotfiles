#!/bin/sh

SERVER="Dev"
HOME="/home/razak"
DEV=$HOME/personal/workspace
X="tmux -L ${SERVER}"
MONEYPORTAL=$DEV/coding/projects/money-portal
WEBSITE="$DEV/coding/website"
V1="$DEV/coding/web/v1"
CC=$DEV/coding/coding_challenges
DEMOS=$DEV/coding/demos
DS=$DEV/coding/ds_and_algos
SCRIPTS=$DEV/Scripts
DOC=$HOME/docs
NVIM=$HOME/.config/nvim
C_NVIM=$HOME/.cache/nvim
SH_NVIM=$HOME/.local/share/nvim
DOCS=/run/media/razak/55CD-9C80/Portable/Documents/Docs
SKLESS=$HOME/.dots/suckless
config_file="$HOME/.config/tmux/xd.tmux.conf"

getPaneId() {
  tag=$1
  sessionOrWindowId=$2
  if [[ "$tag" == "-p" ]]; then
    paneId=$($X display -p '#{pane_id}')
  elif [[ "$tag" == "-s" ]]; then
    paneId=$($X list-panes -s -F '#D' -t $sessionOrWindowId)
  elif [[ "$tag" == "-w" ]]; then
    paneId=$($X list-panes -F '#D' -t $sessionOrWindowId)
  elif [[ "$tag" == "-a" ]]; then
    paneId=$($X list-panes -a -F '#D')
  fi
  echo $paneId
}

getWindowId() {
  tag=$1
  session=$2
  if [[ "$tag" == "-s" ]]; then
    windowIds=$($X list-windows -F '#{window_id}' -t $session)
  elif [[ "$tag" == "-a" ]]; then
    windowIds=$($X list-windows -a -F '#{window_id}')
  fi
  echo $windowIds
}

panesList() {
  tag=$1
  shift
  if [[ "$tag" == "-a" ]]; then
    panes=$($X list-panes -a -F '#D')
  elif [[ "$tag" == "-w" ]]; then
    panes=$($X list-panes -F '#D')
  elif [[ "$tag" == "-s" ]]; then
    if [[ $# -gt 0 ]]; then
      panes=$($X list-panes -sF "#D" -t "$@")
    else
      echo "option requires an argument a target session"
      exit 1
    fi
  fi
  echo $panes
}

splitPane() {
  split=$1
  shift
  cmd="$X splitw"
  if [[ "$split" == "-v" ]]; then
    cmd="$cmd -h $@"
  elif [[ "$split" == "-h" ]]; then
    cmd="$cmd -v $@"
  fi
  eval $cmd
}

getTarget() {
  target=$1
  id=$2
  shift
  shift
  if [[ $# -gt 0 ]]; then
    if [[ "$@" == "-w" ]]; then
      cmd=$(getWindowId -s $target)
    elif [[ "$@" == "-p" ]]; then
      cmd=$(getPaneId -w $target)
    fi
  fi
  IFS=' ' read -ra ids <<< "$cmd"
  echo "${ids[$id]}"
}

sessionNumber() {
  res=$($X display -p '#{session_id}' | cut -b 2-)
  echo $res
}

resizePane() {
  ($X resizep -x 50% -y 50%)
}

breakPane() {
  ($X break-pane -dP -F '#{session_name}:#{window_index}.#{pane_index}' -n 'break')
}

createSession() {
  session=$1
  window=$2
  hasSession=$($X list-sessions -F \#S | grep "$session")
  shift
  shift

  # ($X list-sessions -F \#S | awk '{print $1}')
  # printf "hasSession: %s.\n" "$hasSession"
  # printf "session: %s, window: %s.\n" "$session" "$window"
  if [[ "$session" == "$hasSession" ]]; then
    printf "duplicate session '%s'. Available sessions:\n" "$session"
    ($X list-sessions)
  else
    if [[ "$#" -gt 0 ]]; then
      cmd="$X new -s $session -d -c$@ -n $window > /dev/null 2>&1"
    else
      cmd="$X new -s $session -d -n $window > /dev/null 2>&1"
    fi
    printf "session '%s' has been created.\n" "$session"
    eval $cmd
  fi
}

killSession() {
  session=$1
  current=$($X display -p '#S')
  target=$($X list-sessions -F \#S | grep "$session")

  printf "session: %s, target: %s.\n" "$session" "$target"
  shift
  if [[ "$current" == "$session" ]]; then
    printf "cannot delete attached session '%s'.\n" "$session"
    exit 1
  fi
  if [[ "$target" == "$session" ]]; then
    printf "session '%s' has been deleted.\n" "$session"
    ($X kill-session -t $session)
  else
    printf "session '%s' does not exist. Available sessions:\n" "$session"
    ($X list-sessions)
  fi
  exit 1
}

createWindow() {
  session=$1
  window=$2
  shift
  shift
  hasWindow=$($X list-windows -t $session | grep "$window")
  if [[ -z "$hasWindow" ]]; then
    ($X neww -t $session: -n $window -d $@)
  else
    echo duplicate window: $window
  fi
}

helpMenu() {
  echo -h: help
  echo -r: resize
  echo -m: moneyportal
  echo -s: "create session. followed by <session-name>"
  echo -w: website
  echo -n: regular sessions. followed by \"-name\"
  echo -name:
  echo "    -c: coding_challenges"
  echo "    -d: demos"
  echo "    -ds: ds_and_algos"
  echo "    -m: m_"
  echo "    -s: scripts"
  echo -c: regular commands. followed by \"-cmd\"
  echo -cmd:
  echo "    -zs": send \"zs\" to all panes
  echo "    -cls" send \"clear\" to all panes
  echo "    -w: window name"
  echo "    -p: pane id"
  echo "    -pt: pane title"
}

zTest() {
  if [[ -z "$*" ]]; then
    echo "-n should have the next argument contain actual session"
    exit 1
  else
    arg="$*"
    echo YAY $arg
    exit 1
  fi
}

checkEmpty() {
  arg="$1"
  if [[ -z $arg ]]; then
    echo "missing actual command."
    exit 1
  fi
}

simpleCommands() {
  case "$arg" in
    "-p") ($X run-shell -b 'echo pane id is #{pane_id}') ;;
    "-pt") ($X run-shell -b 'echo pane title is #{pane_title}') ;;
    "-w") $($X run-shell -b 'echo window name is #{window_name}') ;;
    *) echo "Unavailables ... $cmd"
  esac
}

firstSession() {
  session="first"

  # cmd="$X -f "$config_file" new -s first2 -c$HOME/.config/nvim -n main"
  # eval $cmd

  # createSession $session "main" $NVIM
  createWindow $session "config" -c $SH_NVIM

  tw=$(getTarget $session 0 -w)
  first=$(getTarget $tw 0 -p)
  splitPane -v -c $DOC -t $first

  tw=$(getTarget $session 1 -w)
  first=$(getTarget $tw 0 -p)
  splitPane -v -c $C_NVIM -t $first

  ($X a -t first)
}

envSession() {
  session="env"
  createSession $session "dots" $HOME/.dots
  createWindow $session "dwm" -c $SKLESS/dwm
  createWindow $session "dwmblocks" -c $SKLESS/dwmblocks
  createWindow $session "st" -c $SKLESS/st
}

finalSession() {
  session="ml"
  createSession $session "main" $DEV/Code/py/ml
  createWindow $session "run" -c $DEV/Code/py/ml/getting-started
  tw=$(getTarget $session 0 -w)
  tw2=$(getTarget $session 1 -w)
  second=$(getTarget $tw2 0 -p)
  $X send-keys -t $(getTarget $tw 0 -p) "conda activate project-work" "C-m"
  $X send-keys -t $second "conda activate project-work" "C-m"
  $X send-keys -t $second "jupyter lab" "C-m"
}

moneyportalSession() {
  session="money-portal"
  createSession $session "code" $MONEYPORTAL
  createWindow $session "run" -c $MONEYPORTAL/web
  createWindow $session "psql-redis" -c $MONEYPORTAL/server
  createWindow $session "docker-azure" -c $MONEYPORTAL/server

  # First Window
  tw=$(getTarget $session 0 -w)
  $X send-keys -t $(getTarget $tw 0 -p) "nvim" "C-m"

  # Second Window
  tw=$(getTarget $session 1 -w)
  first=$(getTarget $tw 0 -p)
  $X send-keys -t $first "yarn dev" "C-m"
  splitPane -v -c $MONEYPORTAL/server -t $first
  second=$(getTarget $tw 1 -p)
  $X send-keys -t $second "yarn watch" "C-m"
  splitPane -h -c $MONEYPORTAL/server -t $second
  third=$(getTarget $tw 2 -p)
  $X send-keys -t $third "yarn dev" "C-m"

  # Third Window
  tw=$(getTarget $session 2 -w)
  first=$(getTarget $tw 0 -p)
  $X send-keys -t $first "psql -U postgres" "C-m"
  splitPane -v -c $MONEYPORTAL/server -t $first
  second=$(getTarget $tw -1 -p)
  $X send-keys -t $second "redis-cli ping" "C-m"

  # Fourth Window
  tw=$(getTarget $session 3 -w)
  first=$(getTarget $tw 0 -p)
  $X send-keys -t $first "docker info" "C-m"
  splitPane -v -c $MONEYPORTAL/server -t $first
  $X send-keys -t $(getTarget $tw -1 -p) "az --h" "C-m"
}

websiteSession() {
  session="website"
  createSession $session "code" $WEBSITE
  createWindow $session "run" -c $WEBSITE
  createWindow $session "v1" -c $V1

  # First Window
  tw=$(getTarget $session 0 -w)
  first=$(getTarget $tw 0 -p)
  $X send-keys -t $first "nv src/pages/index.tsx" "C-m"

  # Second Window
  tw=$(getTarget $session 1 -w)
  first=$(getTarget $tw 0 -p)
  $X send-keys -t $first "git status" "C-m"
  splitPane -v -c $WEBSITE -t $first
  second=$(getTarget $tw 1 -p)
  # $X send-keys -t $second "npm run develop" "C-m"
  splitPane -h -c $WEBSITE -t $second
  third=$(getTarget $tw 2 -p)
  $X send-keys -t $third "cdocs" "C-m"

  # Third Window
  tw=$(getTarget $session 2 -w)
  first=$(getTarget $tw 0 -p)
  $X send-keys -t $first "nv src/pages/index.js" "C-m"
}

ccSession() {
  session="coding_challenges"
  createSession $session main $CC
  tw=$(getTarget $session 0 -w)
  first=$(getTarget $tw 0 -p)
  splitPane -v -c $CC -t $first
}

demosSession() {
  session="demos"
  createSession $session main $DEMOS
  tw=$(getTarget $session 0 -w)
  first=$(getTarget $tw 0 -p)
  splitPane -v -c $DEMOS -t $first
}

dsSession() {
  session="ds_and_algos"
  createSession $session main $DS
  tw=$(getTarget $session 0 -w)
  first=$(getTarget $tw 0 -p)
  splitPane -v -c $DS -t $first
}

mSession() {
  session="m_"
  createSession $session main $C_NVIM
  createWindow $session "init" -c $NVIM
  tw=$(getTarget $session 0 -w)
  first=$(getTarget $tw 0 -p)
  splitPane -v -c $DOCS -t $first
}

scriptsSession() {
  session="scripts"
  createSession $session main $SCRIPTS
  createWindow $session "bin" -c $HOME/.local/bin
  tw=$(getTarget $session 0 -w)
  first=$(getTarget $tw 0 -p)
  splitPane -v -c $SCRIPTS -t $first
}

while [[ "$#" -gt 0 ]]; do
  curr=$1
  shift

  case "$curr" in
    -h | --help) helpMenu ;;
    "-c")
      arg=$1
      checkEmpty $arg
      shift
      case "$arg" in
        "-a") panes=$(panesList -a) ;;
        "-w") panes=$(panesList -w) ;;
        "-s")
          echo session: $1
          if [[ $# -lt 2 ]]; then
            echo "missing session name or command"
            exit 1
          else
            panes=$(panesList -s $1)
          fi
          ;;
        *) echo "Unavailables ... $cmd"
      esac
      if [[ $arg == "-s" ]]; then
        shift
      fi
      echo panes: $panes
      cmd=$1
      echo cmd: $cmd
      checkEmpty $cmd
      shift
      IFS=' ' read -ra ids <<< "$panes"
      for i in ${panes[@]}; do
        echo sending cmd: $cmd to $i
        $X send-keys -t $i $cmd "C-m"
      done
    ;;
  # "-k")
  #   arg=$1
  #   checkEmpty $arg
  #   shift
  #   simpleCommands $arg
  #   ;;
  -r | --resize) resizePane ;;
  "-N") sessionNumber ;;
  -b | --break) breakPane ;;
  "-k")
    if [[ "$#" -gt 0 ]] ; then
      arg="$@"
    else
      read -p "Enter session name: " arg
    fi
    checkEmpty $arg
    killSession $arg
    ;;
  "-s")
    if [[ "$#" -gt 0 ]] ; then
      arg="$@"
    else
      read -p "Enter session name: " arg
    fi
    checkEmpty $arg
    createSession $arg "main"
    exit 1
    ;;
  "-z") zTest ;;
  "-env") envSession ;;
  "-first") firstSession ;;
  "-final") finalSession ;;
  "-m") moneyportalSession ;;
  "-w") websiteSession ;;
  "-n")
    arg=$1
    checkEmpty $arg
    shift
    case "$arg" in
    "-c") ccSession ;;
    "-d") demosSession ;;
    "-ds") dsSession ;;
    "-m") mSession ;;
    "-s") scriptsSession ;;
    *) echo "Unavailable command... $arg"
    esac
    ;;
  *) echo "Unavailable command... $curr"
  esac
done
