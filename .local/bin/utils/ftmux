#!/bin/sh

SERVER="Dev"
HOME="/home/razak"
DEV=$HOME/personal/workspace
X="tmux -L ${SERVER}"
MONEYPORTAL=$DEV/coding/projects/money-portal
DOC=$HOME/docs
NVIM=$HOME/.config/nvim
C_NVIM=$HOME/.cache/nvim
SH_NVIM=$HOME/.local/share/nvim

getPaneId() {
	tag=$1
	sessionOrWindowId=$2
	case "$tag" in
	"-p") paneId=$($X display -p '#{pane_id}') ;;
	"-s") paneId=$($X list-panes -s -F '#D' -t "$sessionOrWindowId") ;;
	"-w") paneId=$($X list-panes -F '#D' -t "$sessionOrWindowId") ;;
	"-a") paneId=$($X list-panes -a -F '#D') ;;
	*) echo "Unavailable command... $curr" ;;
	esac
	echo "$paneId"
}

getWindowId() {
	tag=$1
	session=$2
	case "$tag" in
	"-s") windowIds=$($X list-windows -F '#{window_id}' -t "$session") ;;
	"-a") windowIds=$($X list-windows -a -F '#{window_id}') ;;
	*) echo "Unavailable command... $curr" ;;
	esac
	echo "$windowIds"
}

panesList() {
	tag=$1
	shift
	case "$tag" in
	"-a") panes=$($X list-panes -a -F '#D') ;;
	"-w") panes=$($X list-panes -F '#D') ;;
	"-s")
		if [ $# -gt 0 ]; then
			panes=$($X list-panes -sF "#D" -t "$@")
		else
			echo "option requires an argument a target session"
			exit 1
		fi
		;;
	*) echo "Unavailable command... $curr" ;;
	esac
	echo "$panes"
}

splitPane() {
	split=$1
	shift
	cmd="$X splitw"
	case "$split" in
	-v) cmd="$cmd -h $@" ;;
	-h) cmd="$cmd -v $@" ;;
	*) echo "Unavailable command... $curr" ;;
	esac
	eval "$cmd"
}

getTarget() {
	target=$1
	id=$2
	shift
	shift
	if [ $# -gt 0 ]; then
		if [ "$@" == "-w" ]; then
			cmd=$(getWindowId -s "$target")
		elif [ "$@" == "-p" ]; then
			cmd=$(getPaneId -w "$target")
		fi
	fi
	IFS=' ' read -ra ids <<<"$cmd"
	echo "${ids[$id]}"
}

sessionNumber() {
	res=$($X display -p '#{session_id}' | cut -b 2-)
	echo "$res"
}

resizePane() {
	($X resizep -x 50% -y 50%)
}

breakPane() {
	($X break-pane -dP -F '#{session_name}:#{window_index}.#{pane_index}' -n 'break')
}

createSession() {
	session=$1
	window=$2
	hasSession=$($X list-sessions -F \#S | grep "$session")
	shift
	shift

	# ($X list-sessions -F \#S | awk '{print $1}')
	# printf "hasSession: %s.\n" "$hasSession"
	# printf "session: %s, window: %s.\n" "$session" "$window"
	if [ "$session" == "$hasSession" ]; then
		printf "duplicate session '%s'. Available sessions:\n" "$session"
		($X list-sessions)
	else
		if [ "$#" -gt 0 ]; then
			cmd="$X new -s $session -d -c$@ -n $window > /dev/null 2>&1"
		else
			cmd="$X new -s $session -d -n $window > /dev/null 2>&1"
		fi
		printf "session '%s' has been created.\n" "$session"
		eval "$cmd"
	fi
}

killSession() {
	session=$1
	current=$($X display -p '#S')
	target=$($X list-sessions -F \#S | grep "$session")

	printf "session: %s, target: %s.\n" "$session" "$target"
	shift
	if [ "$current" == "$session" ]; then
		printf "cannot delete attached session '%s'.\n" "$session"
		exit 1
	fi
	if [ "$target" == "$session" ]; then
		printf "session '%s' has been deleted.\n" "$session"
		($X kill-session -t "$session")
	else
		printf "session '%s' does not exist. Available sessions:\n" "$session"
		($X list-sessions)
	fi
	exit 1
}

createWindow() {
	session=$1
	window=$2
	shift
	shift
	hasWindow=$($X list-windows -t "$session" | grep "$window")
	if [[ -z "$hasWindow" ]]; then
		($X neww -t $session: -n "$window" -d "$@")
	else
		echo duplicate window: "$window"
	fi
}

helpMenu() {
	echo -h: help
	echo -r: resize
	echo -m: moneyportal
	echo -s: "create session. followed by <session-name>"
	echo -c: regular commands. followed by \"-cmd\"
	echo -cmd:
	echo "    -zs": send \"zs\" to all panes
	echo "    -cls" send \"clear\" to all panes
	echo "    -w: window name"
	echo "    -p: pane id"
	echo "    -pt: pane title"
}

zTest() {
	if [ -z "$*" ]; then
		echo "-n should have the next argument contain actual session"
		exit 1
	else
		arg="$*"
		echo YAY "$arg"
		exit 1
	fi
}

checkEmpty() {
	arg="$1"
	if [ -z "$arg" ]; then
		echo "missing actual command."
		exit 1
	fi
}

prevPane() {
	paneIdx=$($X display -p '#{pane_index}')
	prevIdx=$((paneIdx - 1))
	count=$($X list-panes -F '#{pane_id}' | awk 'END {print NR}')
	if [ "$prevIdx" -lt 1 ]; then
		prevIdx=$count
	fi
	prevId=$($X list-panes -F '#{pane_id}' | xargs | awk -v var="$prevIdx" '{print $var}')
	($X select-pane -Z -t "$prevId")
}

nextPane() {
	paneIdx=$($X display -p '#{pane_index}')
	nextIdx=$((paneIdx + 1))
	count=$($X list-panes -F '#{pane_id}' | awk 'END {print NR}')
	if [ "$count" -lt "$nextIdx" ]; then
		nextIdx=1
	fi
	nextId=$($X list-panes -F '#{pane_id}' | xargs | awk -v var=$nextIdx '{print $var}')
	($X select-pane -Z -t "$nextId")
}

simpleCommands() {
	case "$arg" in
	"-p") ($X run-shell -b 'echo pane id is #{pane_id}') ;;
	"-pt") ($X run-shell -b 'echo pane title is #{pane_title}') ;;
	"-w") $X run-shell -b 'echo window name is #{window_name}' ;;
	*) echo "Unavailables ... $cmd" ;;
	esac
}

firstSession() {
	session="first"
	$X has-session -t "$session_name" &>/dev/null

	(("$?" != 0)) && createSession $session "main" $NVIM

	createWindow $session "config" -c $SH_NVIM

	tw=$(getTarget $session 0 -w)
	first=$(getTarget "$tw" 0 -p)
	splitPane -v -c $DOC -t "$first"

	tw=$(getTarget "$session" 1 -w)
	first=$(getTarget "$tw" 0 -p)
	splitPane -v -c "$C_NVIM" -t "$first"
}

finalSession() {
	session="ml"
	createSession $session "main" $DEV/Code/py/ml
	createWindow $session "run" -c $DEV/Code/py/ml/getting-started
	tw=$(getTarget $session 0 -w)
	tw2=$(getTarget $session 1 -w)
	second=$(getTarget "$tw2" 0 -p)
	$X send-keys -t "$(getTarget "$tw" 0 -p)" "conda activate project-work" "C-m"
	$X send-keys -t "$second" "conda activate project-work" "C-m"
	$X send-keys -t "$second" "jupyter lab" "C-m"
}

moneyportalSession() {
	session="money-portal"
	createSession $session "code" $MONEYPORTAL
	createWindow $session "run" -c $MONEYPORTAL/web
	createWindow $session "psql-redis" -c $MONEYPORTAL/server
	createWindow $session "docker-azure" -c $MONEYPORTAL/server

	# First Window
	tw=$(getTarget $session 0 -w)
	$X send-keys -t "$(getTarget "$tw" 0 -p)" "nvim" "C-m"

	# Second Window
	tw=$(getTarget $session 1 -w)
	first=$(getTarget "$tw" 0 -p)
	$X send-keys -t "$first" "yarn dev" "C-m"
	splitPane -v -c $MONEYPORTAL/server -t "$first"
	second=$(getTarget "$tw" 1 -p)
	$X send-keys -t "$second" "yarn watch" "C-m"
	splitPane -h -c $MONEYPORTAL/server -t "$second"
	third=$(getTarget "$tw" 2 -p)
	$X send-keys -t "$third" "yarn dev" "C-m"

	# Third Window
	tw=$(getTarget $session 2 -w)
	first=$(getTarget "$tw" 0 -p)
	$X send-keys -t "$first" "psql -U postgres" "C-m"
	splitPane -v -c $MONEYPORTAL/server -t "$first"
	second=$(getTarget "$tw" -1 -p)
	$X send-keys -t "$second" "redis-cli ping" "C-m"

	# Fourth Window
	tw=$(getTarget $session 3 -w)
	first=$(getTarget "$tw" 0 -p)
	$X send-keys -t "$first" "docker info" "C-m"
	splitPane -v -c $MONEYPORTAL/server -t "$first"
	$X send-keys -t "$(getTarget "$tw" -1 -p)" "az --h" "C-m"
}

while [ "$#" -gt 0 ]; do
	curr=$1
	shift

	case "$curr" in
	-h | --help) helpMenu ;;
	-r | --resize) resizePane ;;
	--nextpane) nextPane ;;
	--prevpane) prevPane ;;
	-N) sessionNumber ;;
	-b | --break) breakPane ;;
	-z) zTest "$@" ;;
	-m) moneyportalSession ;;
	--first) firstSession ;;
	--final) finalSession ;;
	-c | --command)
		arg=$1
		checkEmpty "$arg"
		shift
		case "$arg" in
		"-a") panes=$(panesList -a | xargs) ;;
		"-w") panes=$(panesList -w | xargs) ;;
		"-s")
			# echo session: $1
			if [ $# -lt 2 ]; then
				echo "missing session name or command"
				exit 1
			else
				# panes=$(panesList -s "$1" | xargs | cut -b 13-)
				panes=$(panesList -s "$1")
			fi
			;;
		*) echo "Unavailable ... $cmd" ;;
		esac
		if [ "$arg" == "-s" ]; then
			shift
		fi
		echo panes: "$panes"
		cmd=$1
		# echo cmd: $cmd
		checkEmpty "$cmd"
		shift
		# TODO: Figure out how to get each individual pane id from panes array or its a string (maybe)
		IFS=' ' read -ra ids <<<"$panes"
		for i in "${panes[@]}"; do
			echo sending cmd: "$cmd" to "$i" hello
			$X send-keys -t "$i" "$cmd" "C-m"
		done
		;;
	--simple)
		arg=$1
		checkEmpty "$arg"
		shift
		simpleCommands "$arg"
		;;
	-k | --kill)
		if [ "$#" -gt 0 ]; then
			arg="$@"
		else
			read -rp "Enter session name: " arg
		fi
		checkEmpty "$arg"
		killSession "$arg"
		;;
	-s | --session)
		if [ "$#" -gt 0 ]; then
			arg="$@"
		else
			read -rp "Enter session name: " arg
		fi
		checkEmpty "$arg"
		createSession "$arg" "main"
		exit 1
		;;
	*) echo "Unavailable command... $curr" ;;
	esac
done
