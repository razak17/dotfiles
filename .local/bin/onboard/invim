#!/bin/sh

scversion="stable" # or "v0.4.7", or "latest"
lsp_path='.cache/nvim/nvim_lsp'
neovim_py='.cache/nvim/venv/neovim'
dap_py='.cache/nvim/venv/dap'
dap_dir='.cache/nvim/dap'

dirs=(
  '.cache/nvim/dap'
  '.cache/nvim/swap'
  '.cache/nvim/tags'
  '.cache/nvim/view'
  '.cache/nvim/backup'
  '.cache/nvim/sessions'
  '.cache/nvim/undodir'
  '.cache/nvim/nvim_lsp'
)

simple_lsp=(
  "vscode-json-languageserver",
  "vscode-css-languageserver-bin",
  "dockerfile-language-server-nodejs",
  "graphql-language-service-cli",
  "vscode-html-languageserver-bin",
  "svelte-language-server",
  "vim-language-server",
  "yaml-language-server",
  "bash-language-server",
  "sql-language-server",
  'typescript-language-server',
  'typescript',
  'pyright'
  'neovim'

)

createDirs() {
  for d in ${dirs[@]}; do
    echo creating dir: $d
    mkdir -p ~/$d
  done
  mkdir -p ~/$lsp_path
}

pythonVenvInit() {
  mkdir -p ~/$neovim_py
  python3 -m venv ~/$neovim_py
  ~/$neovim_py/bin/pip3 install -U setuptools pynvim jedi isort flake8 black neovim-remote ueberzug
  pip3 install ueberzug pynvim neovim-remote
}

dapVenvInit() {
  mkdir -p ~/$dap_py
  python3 -m venv ~/$dap_py
  ~/$dap_py/bin/python -m pip install debugpy
}

nodeHostInit() {
  for l in ${simple_lsp[@]}; do
    echo installing server: $l
    npm i -g $l
  done
}

golangInit() {
  go get github.com/mattn/efm-langserver
  go get golang.org/x/tools/gopls@latest
  asdf reshim golang
}

installLua() {
  cd ~/$lsp_path
  curl -R -O http://www.lua.org/ftp/lua-5.3.6.tar.gz
  tar -zxf lua-5.3.6.tar.gz
  cd lua-5.3.6
  make linux test
  sudo make install
}

installLuarocks() {
  cd ~/$lsp_path
  wget https://luarocks.org/releases/luarocks-3.3.1.tar.gz
  tar -zxf luarocks-3.3.1.tar.gz
  cd luarocks-3.3.1
  ./configure --with-lua-include=/usr/local/include
  # ./configure --with-lua-include=/usr/include
  make linux
  sudo make install
}

installSumneko() {
  cd ~/$lsp_path
  git clone https://github.com/sumneko/lua-language-server
  cd lua-language-server
  git submodule update --init --recursive
  cd 3rd/luamake
  ninja -f ninja/linux.ninja
  cd ../..
  ./3rd/luamake/luamake rebuild
}

installElixirLs() {
  cd ~/$lsp_path
  git clone https://github.com/elixir-lsp/elixir-ls
  cd elixir-ls
  mix deps.get
  mix compile
  mix elixir_ls.release -o ./.bin
}

installStyLua() {
  version="0.8.1"
  curl -L https://github.com/johnnymorganz/stylua/releases/latest/download/stylua-${version}-linux.zip -o ~/.dots/stylua-${version}.zip
  cd ~/.dots && ext stylua-${version}.zip
  cd ~/.dots/stylua-${version} && chmod +x ./stylua
  cp --force ./stylua ~/.local/bin
  cd .. && rm stylua-${version}.zip
}

installShellcheck() {
  cd ~/$lsp_path
  wget -qO- "https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz" | tar -xJv
  cp "shellcheck-${scversion}/shellcheck" /usr/bin/
  shellcheck --version
}

installNodeDebug2() {
  cd ~/$dap_dir
  if [ ! -d ~/$dap_dir/vscode-node-debug2 ]; then
    git clone https://github.com/microsoft/vscode-node-debug2.git
  fi
  cd vscode-node-debug2
  npm install
  npm i -g gulp-cli
  gulp build
}

installRocks() {
  luarocks install openssl
  luarocks install lua-http-parser
  luarocks install --server=https://luarocks.org/dev luaformatter
}

createDirs
pythonVenvInit
dapVenvInit
nodeHostInit
golangInit
installLua
installLuarocks
installSumneko
installElixirLs
# installStyLua
# installShellcheck
installNodeDebug2
installRocks
